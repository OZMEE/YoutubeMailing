package ru.ozmee.YoutubeMailingBot.IOMessage;

import com.vdurmont.emoji.EmojiParser;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import ru.ozmee.YoutubeMailingBot.models.Channel;
import ru.ozmee.YoutubeMailingBot.models.Chat;
import ru.ozmee.YoutubeMailingBot.services.ChannelService;
import ru.ozmee.YoutubeMailingBot.services.ChatService;
import ru.ozmee.YoutubeMailingBot.util.ConverterHttp;
import ru.ozmee.YoutubeMailingBot.util.NotFoundLastVideoException;
import ru.ozmee.YoutubeMailingBot.util.ValidatorHttp;

import java.util.List;
import java.util.Objects;

@Slf4j
@Component
public class MessageHandler {
    private final ChannelService channelService;
    private final ChatService chatService;
    private final KeyboardController keyboardController;
    private final ValidatorHttp validatorHttp;
    private final ConverterHttp converterHttp;
    @Autowired
    public MessageHandler(ChannelService channelService, ChatService chatService, KeyboardController keyboardController, ValidatorHttp validatorHttp, ConverterHttp converterHttp){
        this.channelService = channelService;
        this.chatService = chatService;
        this.keyboardController = keyboardController;
        this.validatorHttp = validatorHttp;
        this.converterHttp = converterHttp;
    }

    private static final String START = "/start";
    private static final String MY_CHANNELS = "/my_channels";

    public SendMessage distributeMessage(Message messageFromUser){
        String textFromUser = messageFromUser.getText();
        Long chatId = messageFromUser.getChatId();
        String username = messageFromUser.getChat().getUserName()==null ? "–¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ì–∏–≥–∞—á–∞–¥—É—Ä–ª" : '@' + messageFromUser.getChat().getUserName();
        chatService.ifNotExistCreate(chatId);

        SendMessage message;

        if ( validatorHttp.isHttp(textFromUser) ){
            if (validatorHttp.isValidHttp(textFromUser)){
                message = regNewChannelCommand(chatId, username, textFromUser);
            } else{
                message = defaultMessage(chatId, "–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞");
            }
        }
        else {
            switch (textFromUser) {
                case START -> message = startMessage(chatId, username);
                case MY_CHANNELS -> message = myChannelsMessage(chatId, username);
                default -> message = defaultMessage(chatId, "–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
            }
        }
        return message;
    }

    public EditMessageText deleteRequestCommand(Update update){
        String response = update.getCallbackQuery().getData();
        long messageId = update.getCallbackQuery().getMessage().getMessageId();
        long chatId = update.getCallbackQuery().getMessage().getChatId();
        String username = update.getCallbackQuery().getFrom().getUserName();

        String text;

        int channelId = Integer.parseInt(response);

        EditMessageText editMessage = new EditMessageText();

        editMessage.setChatId(String.valueOf(chatId));
        editMessage.setMessageId((int)messageId);

        if(chatService.chatHaveChannel(chatId, channelId)) {
            chatService.deleteChannelFromChat(chatId, channelId);
            channelService.deleteChannelIfNotUse(channelId);
            List<Channel> channels = chatService.findByChatId(chatId).getChannels();

            InlineKeyboardMarkup inlineKeyboard = keyboardController.registerInlineKeyboard(channels);
            editMessage.setReplyMarkup(inlineKeyboard);

            text = generateTextMyChannels(channels, username);
        } else{
            text = "–î–∞–Ω–Ω—ã–µ –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ, –æ—Ç–∫—Ä–æ–π—Ç–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤";
        }

        editMessage.setText(text);

        return editMessage;
    }

    private SendMessage startMessage(Long chatId, String username){
        String text = """
                –ü—Ä–∏–≤–µ—Ç, %s \uD83E\uDD1A
                –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ –æ—Ç –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –≤–∞—Å –∫–∞–Ω–∞–ª–æ–≤ üëç
                –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–µ–Ω—è –º–æ–∂–Ω–æ –æ—á–µ–Ω—å –ª–µ–≥–∫–æ, –≤ –≤–∞—à–µ–º —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–∏ –≤—Å–µ–≥–æ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ - /my_channels
                –° –ø–æ–º–æ—â—å—é –Ω–µ–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, —Ç–∞–º –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å –∫–∞–Ω–∞–ª—ã –∏–∑ —Å–ø–∏—Å–∫–∞, —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
                –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∫–∏–Ω—É—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
                –°—Å—ã–ª–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞ –ª—é–±–æ–π —Ä–∞–∑–¥–µ–ª –∫–∞–Ω–∞–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–≥–ª–∞–≤–Ω–∞—è", "–≤–∏–¥–µ–æ", "—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏" –∏ —Ç.–ø.üßê
                """;
        String formattedText = EmojiParser.parseToUnicode(String.format(text, username));

        return new SendMessage(Long.toString(chatId), formattedText);
    }

    private SendMessage regNewChannelCommand(Long chatId, String username, String requestHttp){

        if (!chatService.isValidCountChannels(chatId)){
            return defaultMessage(chatId, "–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –∫–∞–Ω–∞–ª–æ–≤(");
        }

        String lastVideoHttp;
        String videosHttp;
        try{
            videosHttp = converterHttp.convertHttpToVideosHttp(requestHttp);
            lastVideoHttp= converterHttp.convertVideosHttpToLastVideoHttp(videosHttp);
        }catch (NotFoundLastVideoException e){
            return defaultMessage(chatId, e.getMessage());
        }

        String text;
        Channel channel = channelService.findByVideosHttpOrElseCreate(videosHttp, lastVideoHttp);
        List<Chat> chats = channel.getChats();

        if(chats == null || chats.stream().noneMatch(chat -> Objects.equals(chat.getChatId(), chatId))){
            text = String.format("%s, –∫–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω", username);
            Chat chat = chatService.findByChatId(chatId);
            chat.addChannel(channel);
            channel.addChat(chat);
            chatService.save(chat);
            channelService.save(channel);
        } else{
            text = String.format("%s, —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫", username);
        }

        return defaultMessage(chatId, text);
    }

    private String generateTextMyChannels(List<Channel> channels, String username){
        StringBuilder text = new StringBuilder("ü§©@" + username);

        if(!channels.isEmpty()){
            text.append(", —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ: \n");
            text.append(String.format("(%d/%d)\n", channels.size(), chatService.getMaxCountChannels()));
            for (Channel channel : channels) {
                text.append(channel.getVideosHttp()).append("\n");
            }
        } else{
            text.append(", –≤ —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–∞–Ω–∞–ª—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ –≤—ã—Ö–æ–¥–µ –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ");
        }
        return text.toString();
    }

    private SendMessage defaultMessage(Long chatId, String text){
        String chatIdStr = String.valueOf(chatId);
        String ans = EmojiParser.parseToUnicode(text);
        SendMessage sendMessage = new SendMessage(chatIdStr, ans);

        ReplyKeyboardMarkup replyKeyboardMarkup = keyboardController.registerReplyKeyboard();

        sendMessage.setReplyMarkup(replyKeyboardMarkup);

        return sendMessage;
    }

    public SendMessage myChannelsMessage(Long chatId, String username){
        Chat chat = chatService.findByChatId(chatId);
        List<Channel> channels = chat.getChannels();

        String text = generateTextMyChannels(channels, username);

        String chatIdStr = String.valueOf(chatId);
        SendMessage sendMessage = new SendMessage(chatIdStr, text);

        InlineKeyboardMarkup markupInLine = keyboardController.registerInlineKeyboard(channels);
        sendMessage.setReplyMarkup(markupInLine);

        return sendMessage;
    }

    public String notifyMessage(String author, String http){
        String msg = String.format("\uD83E\uDD73 –£ %s –≤—ã—à–ª–æ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ: \uD83E\uDD73 \n %s", author, http);
        return EmojiParser.parseToUnicode(msg);
    }
}
